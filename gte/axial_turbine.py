from math import degrees, radians, log10, sqrt, pi, sin, cos, tan, asin, acos, atan
import numpy as np
import matplotlib.pyplot as plt


ORIGIN = 1  # начало отсчета начиная c
Error = "Ошибки, баги и предупреждения:"


# Средние теплоемкости
def Cp_возд_сред(T1, T2):
    return Cp_сред(lambda T_: Cp_возд(T_), T1, T2)


def Cp_г_сред(T1, T2, alfa_, fuel_):
    return Cp_сред(lambda T_: Cp_г_фун(T_, alfa_, fuel_), T1, T2)


def Cp_г_сред_alfa_1(T1, T2, fuel_):
    return Cp_сред(lambda T_: Сp_г_alfa_1(T_, fuel_), T1, T2)


def Cp_топ_сред(T1, T2, fuel_):
    return Cp_сред(lambda T_: Cp_топ(T_, fuel_), T1, T2)


# Температура смешения
def T_см(T_г_, T_охл, g_охл_, alpha_, fuel_):
    T_0_град = 273.15
    # Температура смешения
    T_смешения = 1000
    cup_ = 1
    eps_ = 0.001
    while abs((T_смешения - cup_) / cup_ * 100) > eps_:
        cup_ = T_смешения
        T_смешения = (Cp_г_сред(T_0_град, T_г_, alpha_, fuel_) * T_г_ +
                      Cp_возд_сред(T_0_град, T_охл) * T_охл * g_охл_) / \
                     Cp_г_сред(T_0_град, T_смешения, alpha_, fuel_) + Cp_возд_сред(T_0_град, T_смешения) * g_охл_
    return T_смешения


def out_red(text):
    return "\033[31m {}".format(text)


Error = "Ошибки, баги и предупреждения:"
# тип горючего
fuel = "КЕРОСИН"
# Полное давление перед турбиной
p_г_torm = 1877.9 * 10 ** 3
# Расход газа на входе в турбину
G_г = 3.6
# Мощность турбины или статическое давление при выходе
N_т = 1.83 * 10 ** 6
# Коэф. избытка воздуха
alfa = 3.126
# Температура торможения газа перед турбиной
T_г_torm = 1400
# Расход воздуха на утечки в турбине
G_ут_т = 14.17 * 10 ** -3
# Температура охлаждающего воздуха
T_охл_torm = 736.7
# Расход воздуха на охлаждение
G_охл = 234.3 ** 10 ** -3

# Угол входа в СА 1-й ступени турбины
alfa_0_вх_в_турб = radians(90)  # TODO Какое значение выбирать?
# Точность итераций
eps = 0.01
# Скорость при выходе из турбины
c_та = 180
# Осевая скорость на входе в турбину (90-120)
c_0a = 100
# Температура 0 градусов
T_0_grad = 273.15
# Температура сопловой лопатки
T_рл = 1200
# Температура рабочей лопатки
T_сл = 1200
# Лопаточный кпд турбины
eff_л_исход = 0.91
# Запас по частоте вращения
n_запас = 0.9

# Расчет турбины
# Газовая постоянная для продуктов сгорания
R_г = R_г_фун(alfa, fuel)

# Удельная работа турбины
L_т = 2 * N_т / (G_г + (G_г + G_охл - G_ут_т))
# Располагаемый теплоперепад турбины
H_т = (L_т + c_та ** 2 / 2) / eff_л_исход

# Начальные приближения
Cp_т_сред = 1000
T_т = 1000
cup = 1
while abs(Cp_т_сред - cup) / cup * 100 > eps:
    cup = Cp_т_сред
    # Средняя теплоемкость процесса
    Cp_т_сред = Cp_г_сред(T_т, T_г_torm, alfa, fuel)
    # Показатель адиабаты
    k_т_сред = Cp_т_сред / (Cp_т_сред - R_г)
    # Статическая температура на выходе турбины
    T_т = T_г_torm - H_т * eff_л_исход / Cp_т_сред
del cup

# Статическое давление на выходе из турбины
p_т = p_г_torm * (1 - H_т / (Cp_т_сред * T_г_torm)) ** (k_т_сред / (k_т_сред - 1))
# Степень расширения в турбине
pi_т = p_г_torm / p_т
# Удельный объем на выходе из турбины
v_т = R_г * T_т / p_т
# Расход газа на выходе турбины
G_т = G_г + G_охл - G_ут_т
# Площадь кольцевого сечения на выходе турбины
F_та = G_т * v_т / c_та
# Ресурс, час
tau = 10000
# Параметр Ларсена-Мюллера
P = T_сл * (log10(tau) + 20)
# Длительная прочность материала, МПа
sigma_дл = 250  # TODO сделать интерполяцию
# Максимальна частота вращения, об/мин
k_sigma = 1.25
k_n = 6.8 * 10 ** -6
n_т_max = sqrt(sigma_дл / (k_sigma * k_n * F_та))
# Частота вращения ротора
n_т = n_т_max * n_запас
# Скорость на среднем диаметре последней ступени
u_т = 440
# Средний диаметр последней ступени
D_т_сред = 60 * u_т / (pi * n_т)
# Длина рабочей лопатки последней ступени
l_т = F_та / (pi * D_т_сред)
# Диаметр периферии на выходе из турбины
D_т_пер = D_т_сред + 2 * l_т / 2
# Диаметр корня на выходе из турбины
D_т_кор = D_т_сред - 2 * l_т / 2

# Основные размеры многоступенчатой турбины

# Начальные приближения
Cp_г = 1000
cup = 100
while abs(Cp_г - cup) / cup * 100 > eps:
    cup = Cp_г
    # Статическая температура на входе в турбину
    T_г = T_г_torm - c_0a ** 2 / (2 * Cp_г)
    # Теплоемкость газов на входе в турбину
    Cp_г = Cp_г_фун(T_г, alfa, fuel)
    k_г = Cp_г / (Cp_г - R_г)

# Статическое давление на воде в турбину
p_г = p_г_torm * (T_г / T_г_torm) ** (k_г / (k_г - 1))
# Удельный объем на входе в турбину
v_г = R_г * T_г / p_г
# Площадь кольцевого сечения на входе в турбину
F_0а = G_г * v_г / c_0a

вид_проточной_части = 'середина = const'  # TODO в исходные данные
if вид_проточной_части == 'периферия = const':
    # Диаметр периферии на входе в Т
    D_0_пер = D_т_пер
    # Диаметр корня на входе в Т
    D_0_кор = sqrt(D_0_пер ** 2 - 4 * F_0а / pi)
    # Длина лопатки на входе в Т
    l_0 = (D_0_пер - D_0_кор) / 2
    # Средний диаметр при входе Т
    D_0_сред = (D_0_пер + D_0_кор) / 2
elif вид_проточной_части == 'середина = const':
    # Длина лопатки на входе в Т
    l_0 = F_0а / (pi * D_т_сред)
    # Средний диаметр при входе Т
    D_0_сред = D_т_сред
    # Диаметр периферии на входе в Т
    D_0_пер = D_0_сред + 2 * l_0 / 2
    # Диаметр корня на входе в Т
    D_0_кор = D_0_сред - 2 * l_0 / 2
elif вид_проточной_части == 'корень = const':
    # Диаметр корня на входе в Т
    D_0_кор = D_т_кор
    # Диаметр периферии на входе в Т
    D_0_пер = sqrt(D_0_кор ** 2 + 4 * F_0а / pi)
    # Длина лопатки на входе в Т
    l_0 = (D_0_пер - D_0_кор) / 2
    # Средний диаметр при входе Т
    D_0_сред = (D_0_пер + D_0_кор) / 2

# Средний диаметр при выходе в СА первой ступени
D_1_сред = D_0_сред
# Окружная скорость на выходе из СА первой ступени
u_1 = pi * D_1_сред * n_т / 60
# Средняя окружная скорость в турбине
u_сред = sqrt((u_1 ** 2 + u_т ** 2) / 2)
# Оптимальное отношение
y_0 = 0.55  # TODO в исходные данные

# Средняя скорость за ступенями задается исходя из значений скоростей
# перед первой и за последней ступенями
c_2_сред = (c_0a + c_та) / 2
# Коэф. использования скорости 0,7-1
mu = 0.95  # TODO в исходные данные

# Начальные приближения
alfa_возв = 0.025
cup = 100
while abs(alfa_возв - cup) / cup * 100 > eps:
    cup = alfa_возв
    # Число ступеней турбины
    A = 2 * H_т * (1 + alfa_возв) / (mu * c_2_сред) ** 2 - 1
    B = u_сред ** 2 / ((mu * c_2_сред) ** 2 * y_0 ** 2) - 1
    z = A / B
    # Коэф. возврата теплоты
    alfa_возв = (z - 1) / (2 * z) * (pi_т ** ((k_т_сред - 1) / k_т_сред) - 1) * (1 - eff_л_исход)
del A, B, cup
z = round(z)

# Перекрытие на периферии   #TODO реализовать как нибудь поудобнее
delta_перекрыши_пер = 1.5 * 10 ** -3
# Перекрытие у корня
delta_перекрыши_кор = 1 * 10 ** -3

# Удлинение СЛ по отношению к осевой ширине 1-1.5
l_bа_с = 1.25
# Удлинение РЛ по отношению к осевой ширине 1.5-2
l_bа_р = 1.75

D_c0_сред = np.zeros(z)
D_т2_сред = np.zeros(z)
D_c1_сред = np.zeros(z)
D_т1_сред = np.zeros(z)
l_с0 = np.zeros(z)
l_с1 = np.zeros(z)
l_р1 = np.zeros(z)
l_р2 = np.zeros(z)
b_ас = np.zeros(z)
b_ар = np.zeros(z)
D_c0_пер = np.zeros(z)
D_c0_кор = np.zeros(z)
D_c1_пер = np.zeros(z)
D_c1_кор = np.zeros(z)
D_т1_пер = np.zeros(z)
D_т1_кор = np.zeros(z)
D_т2_пер = np.zeros(z)
D_т2_кор = np.zeros(z)
np.zeros(z)
np.zeros(z)
np.zeros(z)
np.zeros(z)
delta_осев = np.zeros(z)
delta_рад = np.zeros(z)
u_1 = np.zeros(z)
u_2 = np.zeros(z)

H_0 = np.zeros(z)
T_0_torm = np.zeros(z)
p_0_torm = np.zeros(z)
G_г0 = np.zeros(z)
eff_ст = np.zeros(z)
H = np.zeros(z)
c_0a = np.ones(z) * c_0a  # TODO убрать в исходные данные

phi = np.zeros(z)
H_с = np.zeros(z)
c_0 = np.zeros(z)
# Степень реактивности
с_1ад = np.zeros(z)
c_1 = np.zeros(z)
teta_СА = np.zeros(z)
g_охл_CA = np.zeros(z)
G_охл_СА = np.zeros(z)
G_г1 = np.zeros(z)
T_1см_torm = np.zeros(z)
T_1_torm = np.zeros(z)
Cp_0 = np.zeros(z)
k_0 = np.zeros(z)
T_0 = np.zeros(z)
T_1 = np.zeros(z)
Cp_1 = np.zeros(z)
k_1 = np.zeros(z)
Cp_01 = np.zeros(z)
k_01 = np.zeros(z)
T_1ад = np.zeros(z)
p_1 = np.zeros(z)
p_1_torm = np.zeros(z)
v_1 = np.zeros(z)
alfa_1 = np.zeros(z)
gamma_СА = np.zeros(z)
b_с = np.zeros(z)
alfa_0 = np.zeros(z)
c_max_otn_охл = np.zeros(z)
t_b_СА = np.zeros(z)
t_с = np.zeros(z)
ro_кор = np.zeros(z)
F_1а = np.zeros(z)
c_1a = np.zeros(z)
c_1u = np.zeros(z)
betta_1 = np.zeros(z)
w_1 = np.zeros(z)
w_1u = np.zeros(z)
w_1a = np.zeros(z)
T_1w_torm = np.zeros(z)
p_1w_torm = np.zeros(z)
dzeta_трения_са = np.zeros(z)
s_с_кромки = np.zeros(z)
dzeta_кромочные_са = np.zeros(z)
mu_вяз_c = np.zeros(z)
Re_с = np.zeros(z)
delta_dzeta_Re_са = np.zeros(z)
a_с1_кр = np.zeros(z)
delta_dzeta_lambda_са = np.zeros(z)
alfa_0p = np.zeros(z)
delta_dzeta_i_са = np.zeros(z)
dzeta_профильные_са = np.zeros(z)
dzeta_концевые_са = np.zeros(z)
c_1_реал = np.zeros(z)
c_1_теор = np.zeros(z)
h_тд_са = np.zeros(z)
dzeta_тд_са = np.zeros(z)
dzeta_см_са = np.zeros(z)

psi = np.zeros(z)
H_р = np.zeros(z)
w_2_ад = np.zeros(z)
w_2 = np.zeros(z)
Cp_12 = np.zeros(z)
T_2 = np.zeros(z)
k_12 = np.zeros(z)
T_2ад = np.zeros(z)
p_2 = np.zeros(z)
v_2 = np.zeros(z)
F_2a = np.zeros(z)
teta_РК = np.zeros(z)
g_охл_рк = np.zeros(z)
G_охл_РК = np.zeros(z)
G_г2 = np.zeros(z)
c_2a = np.zeros(z)
w_2u = np.zeros(z)
betta_2 = np.zeros(z)
gamma_РК = np.zeros(z)
b_рк = np.zeros(z)
t_b_РК = np.zeros(z)
t_рк = np.zeros(z)
c_2u = np.zeros(z)
w_2a = np.zeros(z)
c_2 = np.zeros(z)
alfa_2 = np.zeros(z)
Cp_2 = np.zeros(z)
k_2 = np.zeros(z)
T_2см_torm = np.zeros(z)
T_2_torm = np.zeros(z)
p_2_torm = np.zeros(z)
T_w2_torm = np.zeros(z)
dzeta_трения_рк = np.zeros(z)
dzeta_кромочные_рк = np.zeros(z)
mu_вяз_рк = np.zeros(z)
Re_рк = np.zeros(z)
delta_dzeta_Re_рк = np.zeros(z)
a_кр_w2 = np.zeros(z)
delta_dzeta_lambda_рк = np.zeros(z)
betta_1p = np.zeros(z)
delta_dzeta_i_рк = np.zeros(z)
dzeta_профильные_рк = np.zeros(z)
dzeta_концевые_рк = np.zeros(z)
w_2_реал = np.zeros(z)
w_2_теор = np.zeros(z)
h_тд_рк = np.zeros(z)
dzeta_тд_рк = np.zeros(z)
dzeta_см_рк = np.zeros(z)

N_u = np.zeros(z)
L_u = np.zeros(z)
eff_u1 = np.zeros(z)
h_c = np.zeros(z)
h_c_I = np.zeros(z)
dzeta_ca = np.zeros(z)
dzeta_ca_I = np.zeros(z)
h_рк = np.zeros(z)
dzeta_рк = np.zeros(z)
h_вых = np.zeros(z)
dzeta_вых = np.zeros(z)
eff_u2 = np.zeros(z)
h_delta = np.zeros(z)
dzeta_delta = np.zeros(z)
density_12 = np.zeros(z)
N_тв = np.zeros(z)
h_тв = np.zeros(z)
dzeta_тв = np.zeros(z)
eff_л = np.zeros(z)
eff_т = np.zeros(z)
L_ст = np.zeros(z)
T_ст = np.zeros(z)
T_ст_torm = np.zeros(z)
p_ст_torm = np.zeros(z)
pi_ст_torm = np.zeros(z)
pi_ст = np.zeros(z)
H_ст_torm = np.zeros(z)
H_ст = np.zeros(z)
eff_ст_torm = np.zeros(z)
c_0ад = np.zeros(z)
L_u_наг = np.zeros(z)
a_кр_0 = np.zeros(z)
a_кр_1 = np.zeros(z)
a_кр_2 = np.zeros(z)
a_0 = np.zeros(z)
a_1 = np.zeros(z)
a_2 = np.zeros(z)
lambda_0 = np.zeros(z)
lambda_1 = np.zeros(z)
lambda_2 = np.zeros(z)
M_0 = np.zeros(z)
M_1 = np.zeros(z)
M_2 = np.zeros(z)

N_ст = np.ones(z)
ro_сред = [0.3, 0.3, 0.32, 0.32, 0.32, 0.32, 0.32]

for i in range(z):
    # Длина сопловых лопаток на входе в СА
    l_с0[i] = l_0 + (l_т - l_0) / z * i
    # Длина сопловых лопаток на выходе из СА
    l_с1[i] = l_0 + (l_т - l_0) / (z * 2) * (i * 2 + 1)
    # Длина рабочих лопаток на входе в РК
    l_р1[i] = l_с1[i]
    # Длина рабочих лопаток на выходе из РК
    l_р2[i] = l_0 + (l_т - l_0) / z * (i + 1)

    # Осевая ширина сопловых лопаток
    b_ас[i] = l_с0[i] / l_bа_с
    # Ширина рабочих лопаток
    b_ар[i] = l_р1[i] / l_bа_р

    if вид_проточной_части == 'периферия = const':
        # Диаметр периферии на входе в СА
        D_c0_пер[i] = D_0_пер
        # Диаметр корня на входе в СА
        D_c0_кор[i] = D_c0_пер[i] - 2 * l_с0[i]
        # Диаметр периферии на выходе из СА
        D_c1_пер[i] = D_c0_пер[i]
        # Диаметр корня на выходе из СА
        D_c1_кор[i] = D_c1_пер[i] - 2 * l_с1[i]

        # Диаметр периферии на входе в РК
        D_т1_пер[i] = D_c0_пер[i]
        # Диаметр корня на входе в РК
        D_т1_кор[i] = D_т1_пер[i] - 2 * l_р1[i]
        # Диаметр периферии на выходе из РК
        D_т2_пер[i] = D_c0_пер[i]
        # Диаметр корня на выходе из РК
        D_т2_кор[i] = D_т2_пер[i] - 2 * l_р2[i]

    elif вид_проточной_части == 'середина = const':
        # Диаметр периферии на входе в СА
        D_c0_пер[i] = D_0_сред + 2 * l_с0[i] / 2
        # Диаметр корня на входе в СА
        D_c0_кор[i] = D_0_сред - 2 * l_с0[i] / 2
        # Диаметр периферии на выходе из СА
        D_c1_пер[i] = D_0_сред + 2 * l_с1[i] / 2
        # Диаметр корня на выходе из СА
        D_c1_кор[i] = D_0_сред - 2 * l_с1[i] / 2

        # Диаметр периферии на входе в РК
        D_т1_пер[i] = D_0_сред + 2 * l_р1[i] / 2
        # Диаметр корня на входе в РК
        D_т1_кор[i] = D_0_сред - 2 * l_р1[i] / 2
        # Диаметр периферии на выходе из РК
        D_т2_пер[i] = D_0_сред + 2 * l_р2[i] / 2
        # Диаметр корня на выходе из РК
        D_т2_кор[i] = D_0_сред - 2 * l_р2[i] / 2

    elif вид_проточной_части == 'корень = const':
        # Диаметр корня на входе в СА
        D_c0_кор[i] = D_0_кор
        # Диаметр периферии на входе в СА
        D_c0_пер[i] = D_c0_кор[i] + 2 * l_с0[i]
        # Диаметр корня на выходе из СА
        D_c1_кор[i] = D_c0_кор[i]
        # Диаметр периферии на выходе из СА
        D_c1_пер[i] = D_c1_кор[i] + 2 * l_с1[i]

        # Диаметр корня на входе в РК
        D_т1_кор[i] = D_c0_кор[i]
        # Диаметр периферии на входе в РК
        D_т1_пер[i] = D_т1_кор[i] + 2 * l_р1[i]
        # Диаметр корня на выходе из РК
        D_т2_кор[i] = D_т1_кор[i]
        # Диаметр периферии на выходе из РК
        D_т2_пер[i] = D_т2_кор[i] + 2 * l_р2[i]

    # Величина осевого зазора
    delta_осев[i] = 0.225 * b_ас[i]
    # Величина радиального зазора
    delta_рад[i] = 1 * 10 ** (-3)  # TODO уточнить

    # Средний диаметр на входе в СА
    D_c0_сред[i] = (D_c0_кор[i] + D_c0_пер[i]) / 2
    # Средний диаметр на выходе из СА
    D_c1_сред[i] = (D_c1_кор[i] + D_c1_пер[i]) / 2
    # Средний диаметр на входе в Т
    D_т1_сред[i] = (D_т1_кор[i] + D_т1_пер[i]) / 2
    # Средний диаметр на выходе из Т
    D_т2_сред[i] = (D_т2_кор[i] + D_т2_пер[i]) / 2

    # Окружная скорость перед РК
    u_1[i] = pi * D_т1_сред[i] * n_т / 60
    # Окружная скорость за РК
    u_2[i] = pi * D_т2_сред[i] * n_т / 60

X = np.zeros(z * 4)
X[0] = 0
Y_кор = np.ones(z * 4)
Y_сред = np.ones(z * 4)
Y_пер = np.ones(z * 4)

k = 0
for i in range(1, z * 4):
    if i % 4 == 1:
        X[i] = X[i - 1] + b_ас[k]
    elif i % 4 == 2:
        X[i] = X[i - 1] + delta_осев[k]
    elif i % 4 == 3:
        X[i] = X[i - 1] + b_ар[k]
    elif i % 4 == 0:
        X[i] = X[i - 1] + delta_осев[k]
        k += 1

k = 0
for i in range(0, z * 4):
    if i % 4 == 0:
        Y_пер[i] = D_c0_пер[k] / 2
        Y_сред[i] = D_c0_сред[k] / 2
        Y_кор[i] = D_c0_кор[k] / 2
    elif i % 4 == 1:
        Y_пер[i] = D_c1_пер[k] / 2
        Y_сред[i] = D_c1_сред[k] / 2
        Y_кор[i] = D_c1_кор[k] / 2
    elif i % 4 == 2:
        Y_пер[i] = D_т1_пер[k] / 2
        Y_сред[i] = D_т1_сред[k] / 2
        Y_кор[i] = D_т1_кор[k] / 2
    elif i % 4 == 3:
        Y_пер[i] = D_т2_пер[k] / 2
        Y_сред[i] = D_т2_сред[k] / 2
        Y_кор[i] = D_т2_кор[k] / 2
        k += 1

# Создаем графики
fig1, ax1 = plt.subplots()
# Расход воздуха и удельный расход топлива
l1, = ax1.plot(X, Y_кор, color='black', linewidth=2)
l2, = ax1.plot(X, Y_сред, '--', color='green', linewidth=1.5)
l3, = ax1.plot(X, Y_пер, color='black', linewidth=2)
l4, = ax1.plot(X, -Y_кор, color='black', linewidth=2)
l5, = ax1.plot(X, -Y_сред, '--', color='green', linewidth=1.5)
l6, = ax1.plot(X, -Y_пер, color='black', linewidth=2)
ax1.set_xlabel(r'Длина турбины, м')
ax1.set_xlim(-0.025, X[z * 4 - 1] + 0.025)
ax1.vlines(x=X, ymin=Y_кор, ymax=Y_пер, color='blue', linewidth=2)
ax1.vlines(x=X, ymin=-Y_пер, ymax=-Y_кор, color='blue', linewidth=2)
ax1.set_ylabel(r'Радиус, м')
ax1.grid()
ax1.set_aspect('equal')
plt.show()

# Скорость за РК 1-ой ступени
c_21 = 140  # TODO Это приближенно задать в исходные данные

усл_1 = True
cup_N_ст = 1
for i in range(z):
    while True:
        if z == 1:
            c_0a[i] = c_0a[0]
            alfa_0[i] = alfa_0_вх_в_турб
            T_0_torm[i] = T_г_torm
            p_0_torm[i] = p_г_torm
            G_г0[i] = G_г
            N_ст[i] = N_т
            cup_N_ст = N_ст[i]
            if усл_1 is True:
                L_ст[i] = N_ст[i] / G_г0[i]
                eff_ст[i] = 0.9
                усл_1 = False
            else:
                L_ст[i] = N_ст[i] / ((G_г1[i] + G_г2[i]) / 2)
            H_0[i] = L_ст[i] / eff_ст[i]
        else:
            # Расчет первой ступени
            if i == 0:
                c_0a[i] = c_0a[0]
                alfa_0[i] = alfa_0_вх_в_турб
                T_0_torm[i] = T_г_torm
                p_0_torm[i] = p_г_torm
                G_г0[i] = G_г
                # Теплоперепад в 1-ой ступени
                H_0[i] = H_т * (1 + alfa_возв) * u_1[0] ** 2 / (sum(u_1 ** 2)) + 0.5 * (mu * c_21) ** 2
            # Расчет последней ступени
            elif i == z - 1:
                c_0a[i] = c_2a[i - 1]
                alfa_0[i] = alfa_2[i - 1]
                T_0_torm[i] = T_2_torm[i - 1]
                p_0_torm[i] = p_2_torm[i - 1]
                G_г0[i] = G_г2[i - 1]
                N_ст[i] = N_т - sum(N_ст) + N_ст[i]
                cup_N_ст = N_ст[i]
                if усл_1 is True:
                    L_ст[i] = N_ст[i] / G_г0[i]
                    eff_ст[i] = 0.9
                    усл_1 = False
                else:
                    L_ст[i] = N_ст[i] / ((G_г1[i] + G_г2[i]) / 2)
                H_0[i] = L_ст[i] / eff_ст[i]
            # Расчет промежуточных ступеней
            else:
                c_0a[i] = c_2a[i - 1]
                alfa_0[i] = alfa_2[i - 1]
                H[i] = H_т * (1 + alfa_возв) * u_1[i] ** 2 / (sum(u_1 ** 2))
                H_0[i] = H[i] + 0.5 * c_2[i - 1] ** 2
                T_0_torm[i] = T_2_torm[i - 1]
                p_0_torm[i] = p_2_torm[i - 1]
                G_г0[i] = G_г2[i - 1]

        # Условная адиабатическая скорость
        c_0ад[i] = sqrt(2 * H_ст[i])
        # Коэф. скорости в СА
        phi[i] = 1
        cup_phi = 1.1
        while abs((phi[i] - cup_phi) / cup_phi * 100) > eps:
            cup_phi = phi[i]
            # Располагаемый теплоперепад в СА
            H_с[i] = H_0[i] * (1 - ro_сред[i])
            # Скорость на входе в СА
            c_0[i] = c_0a[i] / sin(alfa_0[i])
            # Адиабатическая скорость на выходе из СА
            с_1ад[i] = sqrt(2 * H_с[i])
            # Действительная скорость на выходе из СА
            c_1[i] = phi[i] * с_1ад[i]

            # Температура торможения на выходе из РК без учета смешения
            T_1_torm[i] = T_0_torm[i]

            if T_0_torm[i] - T_сл > 70:
                # Относительная эффективность охлаждения СА
                teta_СА[i] = (T_0_torm[i] - T_сл) / (T_0_torm[i] - T_охл_torm)
                # Относительный расход охлаждающего воздуха на СА
                g_охл_CA[i] = 0.035 * teta_СА[i] / (1 - teta_СА[i])
                # Температура смешения на выходе СА
                T_1см_torm[i] = T_см(T_1_torm[i], T_охл_torm, g_охл_CA[i], alfa, fuel)
                # Температура торможения на выходе из СА
                T_1_torm[i] = T_1см_torm[i]
            else:
                g_охл_CA[i] = 0

            # Расход охлаждающего воздуха на СА
            G_охл_СА[i] = g_охл_CA[i] * G_г0[0]
            # Расход газа на выходе
            G_г1[i] = G_г0[i] + G_охл_СА[i]

            # Начальные приближения
            Cp_0[i] = 1000
            cup = 1
            while abs(Cp_0[i] - cup) / cup * 100 > eps:
                cup = Cp_0[i]
                # Статическая температура на входе в СА
                T_0[i] = T_0_torm[i] - 0.5 * c_0[i] ** 2 / Cp_0[i]
                Cp_0[i] = Cp_г_фун(T_0[i], alfa, fuel)
                k_0[i] = Cp_0[i] / (Cp_0[i] - R_г)
            del cup

            # Начальные приближения
            Cp_1[i] = 1000
            cup = 1
            while abs(Cp_1[i] - cup) / cup * 100 > eps:
                cup = Cp_1[i]
                # Статическая температура на выходе СА
                T_1[i] = T_1_torm[i] - 0.5 * c_1[i] ** 2 / Cp_1[i]
                Cp_1[i] = Cp_г_фун(T_1[i], alfa, fuel)
                k_1[i] = Cp_1[i] / (Cp_1[i] - R_г)
            del cup

            # Теплоемкость процесса расширения в СА
            Cp_01[i] = Cp_г_сред(T_0[i], T_1[i], alfa, fuel)
            # Теплоемкость процесса расширения в СА
            k_01[i] = Cp_01[i] / (Cp_01[i] - R_г)
            # Температура конца адиабатического расширения в СА
            T_1ад[i] = T_0_torm[i] - H_с[i] / Cp_01[i]
            # Статическое давление на выходе СА
            p_1[i] = p_0_torm[i] * (T_1ад[i] / T_0_torm[i]) ** (k_01[i] / (k_01[i] - 1))
            # Полное давление на выходе СА
            p_1_torm[i] = p_1[i] * (1 + c_1[i] ** 2 / (2 * Cp_01[i] * T_1[i])) ** (k_01[i] / (k_01[i] - 1))
            # Удельный объем на выходе СА
            v_1[i] = R_г * T_1[i] / p_1[i]
            # Длина сопловых лопаток на выходе # TODO Нужно сделать проверку
            alfa_1[i] = asin(G_г1[i] * v_1[i] / (pi * D_c1_сред[i] * c_1[i] * l_с1[i]))
            # Угол установки профиля в решетке СА
            gamma_СА[i] = radians(
                70 - 0.127 * degrees(alfa_0[i] - alfa_1[i]) - 0.0041 * (degrees(alfa_0[i] - alfa_1[i])) ** 2)
            b_с[i] = b_ас[i] / sin(gamma_СА[i])
            # Для охлаждаемых лопаток 0.2-0.22
            c_max_otn_охл = 0.21  # TODO Тут нужен массив в зависимости от лопатки охлаждаемая или нет
            # Оптимальный относительный шаг СЛ (ф-лф В. И. Дышлевского)
            t_b_СА[i] = 0.45 * (180 / (180 - degrees(alfa_0[i] + alfa_1[i])) * sin(alfa_0[i]) / sin(alfa_1[i])) ** (
                    1 / 3) * (1 - c_max_otn_охл)
            # Шаг СЛ
            t_с[i] = t_b_СА[i] * b_с[i]
            # Проверка степени реактивности у корня при проектировании по закону
            # alfa=const
            ro_кор[i] = 1 - (1 - ro_сред[i]) * (D_c0_сред[i] / D_c0_кор[i]) ** (
                    2 * phi[i] ** 2 * (cos(alfa_1[i])) ** 2)
            # Площадь кольцевого сечения на выходе СА
            F_1а[i] = pi * D_c1_сред[i] * l_с1[i]
            # Осевая скорость на выходе СА
            c_1a[i] = G_г1[i] * v_1[i] / F_1а[i]
            # Окружная составляющая скорости на выходе СА
            c_1u[i] = c_1[i] * cos(alfa_1[i])
            # Окружная скорость на выходе СА  TODO Если задана геометрия то это считать не нужно
            u_1[i] = pi * D_c1_сред[i] * n_т / 60
            # Угол входа потока в РЛ

            if u_1[i] < c_1u[i]:
                betta_1[i] = atan(c_1a[i] / (c_1u[i] - u_1[i]))
            elif u_1[i] > c_1u[i]:
                betta_1[i] = pi + atan(c_1a[i] / (c_1u[i] - u_1[i]))
            else:
                betta_1[i] = pi / 2

            # Относительная скорость на выходе СА
            w_1[i] = sqrt(c_1[i] ** 2 + u_1[i] ** 2 - 2 * c_1[i] * u_1[i] * cos(alfa_1[i]))
            # Окружная составляющая относительной скорости на выходе СА
            w_1u[i] = w_1[i] * cos(betta_1[i])
            # Осевая составляющая относительной скорости на выходе из СА
            w_1a[i] = w_1[i] * sin(betta_1[i])
            # Температура торможения в относительном движении на входе в РК
            Cp_1[i] = Cp_г_фун(T_1[i], alfa, fuel)
            # Температура торможения в относительном движении на входе в РК
            T_1w_torm[i] = T_1[i] + 0.5 * w_1[i] ** 2 / Cp_1[i]
            # Показатель адиабаты торможения в относительном движении на входе в РК
            k_1[i] = Cp_1[i] / (Cp_1[i] - R_г)
            # Давление торможения в относительном движении на входе в РК
            p_1w_torm[i] = p_1[i] * (T_1w_torm[i] / T_1[i]) ** (k_1[i] / (k_1[i] - 1))

            # Потери трения
            if degrees(alfa_0[i] + alfa_1[i]) <= 110:
                x = degrees(alfa_0[i] + alfa_1[i])
            else:
                x = 110

            if sin(alfa_0[i]) / sin(alfa_1[i]) <= 1.7:
                y = sin(alfa_0[i]) / sin(alfa_1[i])
            else:
                y = 1.7

            dzeta_трения_са[i] = 0.02185 * (0.01065 * x ** 2 - 2.295 * x + 160.5) * (
                    0.1055 * y ** 2 - 0.3427 * y + 0.295)

            # Кромочные потери
            s_с_кромки = 0.5 * 10 ** -3  # Диаметр кромки СА  TODO В исходные данные
            dzeta_кромочные_са[i] = 0.2 * s_с_кромки / (t_с[i] * sin(alfa_1[i]))
            # Поправка на неавтмодельность
            T = (T_0[i] + T_1[i]) / 2
            mu_вяз_c[i] = 1 / 10 ** 5 * (
                    0.229 * (T / 1000) ** 3 - 1.333 * (T / 1000) ** 2 + 4.849 * (T / 1000) + 0.505 - 0.275 / alfa)
            Re_с[i] = c_1[i] * b_с[i] / (v_1[i] * mu_вяз_c[i])
            delta_dzeta_Re_са[i] = 2100 / Re_с[i] - 0.0021
            # Поправка на сжимаемость
            a_с1_кр[i] = sqrt(2 * k_1[i] / (k_1[i] + 1) * R_г * T_1_torm[i])
            lambda_с1 = c_1[i] / a_с1_кр[i]
            lambda_c1_опт = 0.9  # TODO В исходные данные
            lambda_отн_с = lambda_с1 / lambda_c1_опт
            a1c = 0.3  # TODO В исходные данные
            a2c = -0.015  # TODO В исходные данные

            if lambda_отн_с < 0.3:
                X = 0.3
            elif 0.3 <= lambda_отн_с <= 1.35:
                X = lambda_отн_с
            elif lambda_отн_с > 1.35:
                X = 1.35

            delta_dzeta_lambda_са[i] = a1c * (X - 1) ** 2 + a2c * (X - 1)
            # Профильные потери
            dzeta_профильные_са[i] = dzeta_трения_са[i] + dzeta_кромочные_са[i] + delta_dzeta_Re_са[i] + \
                                     delta_dzeta_lambda_са[i]
            # Вторичные потери
            dzeta_концевые_са[i] = 0

            if T_0_torm[i] - T_сл > 70:
                # Термодинамические потери
                A = sin(alfa_1[i]) * F_1а[i] / G_г1[i] * Cp_1[i] / R_г * p_1[i]
                c_1_реал[i] = sqrt(A ** 2 + 2 * Cp_1[i] * T_1см_torm[i]) - A
                c_1_теор[i] = sqrt(A ** 2 + 2 * Cp_1[i] * T_0_torm[i]) - A
                h_тд_са[i] = (c_1_теор[i] ** 2 - c_1_реал[i] ** 2) / 2
                dzeta_тд_са[i] = h_тд_са[i] / H_с[i]
                # Потери смешения
                c_охл_otn = 0.4  # 0.4-0.5
                dzeta_см_са[i] = g_охл_CA[i] / (1 + g_охл_CA[i]) * (1 - c_охл_otn) ** 2
            else:
                dzeta_тд_са[i] = 0
                dzeta_см_са[i] = 0

            # Коэф. скорости для СА
            phi[i] = sqrt(1 - dzeta_профильные_са[i] - dzeta_концевые_са[i] - dzeta_тд_са[i] - dzeta_см_са[i])
        del cup_phi

        # Коэф. скорости в РК
        # Начальные приближения
        psi[i] = 0.97
        cup_psi = 2
        while abs((psi[i] - cup_psi) / cup_psi * 100) > eps:
            cup_psi = psi[i]
            # Располагаемый теплоперепад в РК
            H_р[i] = ro_сред[i] * H_0[i] * T_1[i] / T_1ад[i]
            # Относительная адиабатическая скорость на выходе РК
            w_2_ад[i] = sqrt(w_1[i] ** 2 + 2 * H_р[i] + u_2[i] ** 2 - u_1[i] ** 2)
            # Относительная скорость на выходе РК
            w_2[i] = psi[i] * w_2_ад[i]

            # Начальные приближения
            cup = 1
            Cp_12[i] = 1000
            while True:

                if abs((Cp_12[i] - cup) / cup * 100) > eps:
                    T_2[i] = T_1[i] - (w_2[i] ** 2 - w_1[i] ** 2 - u_2[i] ** 2 + u_1[i] ** 2) / (2 * Cp_12[i])

                k_12[i] = Cp_12[i] / (Cp_12[i] - R_г)
                # Температура конца адиабатического расширения
                T_2ад[i] = T_1[i] - H_р[i] / Cp_12[i]
                # Статическое давление на выходе из РК
                p_2[i] = p_1[i] * (T_2ад[i] / T_1[i]) ** (k_12[i] / (k_12[i] - 1))
                # Удельный объем на выходе из РК
                v_2[i] = R_г * T_2[i] / p_2[i]
                # Площадь кольцевого сечения на выходе из РК
                F_2a[i] = pi * D_т2_сред[i] * l_р2[i]

                if T_1w_torm[i] - T_рл > 70:
                    # Относительная эффективность охлаждения РК
                    teta_РК[i] = (T_1w_torm[i] - T_рл) / (T_1w_torm[i] - T_охл_torm)
                    # Относительный расход охлаждающего воздуха на РК
                    g_охл_рк[i] = 0.035 * teta_РК[i] / (1 - teta_РК[i])
                else:
                    g_охл_рк[i] = 0

                # Расход охлаждающего воздуха на РК
                G_охл_РК[i] = g_охл_рк[i] * G_г0[0]
                # Расход газа на выходе из РК
                G_г2[i] = G_г1[i] + G_охл_РК[i]
                # Осевая скорость на выходе РК
                c_2a[i] = G_г2[i] * v_2[i] / F_2a[i]
                # Окружная составляющая относительной скорости на выходе из РК
                w_2u[i] = sqrt(w_2[i] ** 2 - c_2a[i] ** 2)
                # Угол выхода потока из РК в относительном движении
                betta_2[i] = asin(c_2a[i] / w_2[i])
                # Угол установки профиля в решетке РК
                gamma_РК[i] = radians(
                    70 - 0.127 * degrees(betta_1[i] - betta_2[i]) - 0.0041 * (
                        degrees(betta_1[i] - betta_2[i])) ** 2)
                # Хорда РК
                b_рк[i] = b_ар[i] / sin(gamma_РК[i])
                # Оптимальный относительный шаг РЛ (ф-лф В. И. Дышлевского)
                t_b_РК[i] = 0.6 * (
                        180 / (180 - degrees(betta_1[i] + betta_2[i])) * sin(betta_1[i]) / sin(betta_2[i])) ** (
                                    1 / 3) * (
                                    1 - c_max_otn_охл)
                # Шаг СЛ
                t_рк[i] = t_b_РК[i] * b_рк[i]
                # Окружная составляющая скорости на выходе из РК
                c_2u[i] = w_2u[i] - u_2[i]
                # Осевая составляющая относительной скорости на выходе из РК
                w_2a[i] = w_2[i] * sin(betta_2[i])
                # Абсолютная скорость газа на выходе из РК
                c_2[i] = sqrt(c_2a[i] ** 2 + c_2u[i] ** 2)

                # Угол выхода потока из РК в абсолютном движении
                if c_2u[i] > 0:
                    alfa_2[i] = atan(c_2a[i] / c_2u[i])
                elif c_2u[i] == 0:
                    alfa_2[i] = pi / 2
                elif c_2u[i] < 0:
                    alfa_2[i] = pi + atan(c_2a[i] / c_2u[i])

                if abs((Cp_12[i] - cup) / cup * 100) < eps:
                    break

                cup = Cp_12[i]
                # Температура торможения на выходе из РК
                Cp_2[i] = Cp_г_фун(T_2[i], alfa, fuel)
                k_2[i] = Cp_2[i] / (Cp_2[i] - R_г)
                # Температура торможения на выходе из РК
                T_2_torm[i] = T_2[i] + 0.5 * c_2[i] ** 2 / Cp_2[i]
                if g_охл_рк[i] > 0:
                    # Температура смешения на выходе из РК
                    T_2см_torm[i] = T_см(T_2_torm[i], T_охл_torm, g_охл_рк[i], alfa, fuel)
                    # Статическая температура на выходе из РК
                    T_2[i] = T_2см_torm[i] - 0.5 * c_2[i] ** 2 / Cp_2[i]
                # Температура торможения в относительном движении на выходе из РК
                T_w2_torm[i] = T_2[i] + 0.5 * w_2[i] ** 2 / Cp_2[i]
                # Уточнение теплоемкости
                Cp_12[i] = Cp_г_сред(T_1[i], T_2[i], alfa, fuel)

            # Полное давление на выходе из РК
            p_2_torm[i] = p_2[i] * (T_2_torm[i] / T_2[i]) ** (k_2[i] / (k_2[i] - 1))

            # Потери трения
            if degrees(betta_1[i] + betta_2[i]) <= 110:
                x = degrees(betta_1[i] + betta_2[i])
            else:
                x = 110

            if sin(betta_1[i]) / sin(betta_2[i]) <= 1.7:
                y = sin(betta_1[i]) / sin(betta_2[i])
            else:
                y = 1.7

            dzeta_трения_рк[i] = 0.02185 * (0.01065 * x ** 2 - 2.295 * x + 160.5) * (
                    0.1055 * y ** 2 - 0.3427 * y + 0.295)

            # Кромочные потери
            s_рк_кромки = 0.5 * 10 ** -3  # Диаметр кромки PK #TODO В исходные данные
            dzeta_кромочные_рк[i] = 0.2 * s_рк_кромки / (t_рк[i] * sin(betta_2[i]))
            # Поправка на неавтомодельность
            T = (T_1[i] + T_2[i]) / 2
            mu_вяз_рк[i] = 1 / 10 ** 5 * (
                    0.229 * (T / 1000) ** 3 - 1.333 * (T / 1000) ** 2 + 4.849 * (T / 1000) + 0.505 - 0.275 / alfa)
            Re_рк[i] = c_2[i] * b_рк[i] / (v_2[i] * mu_вяз_рк[i])
            delta_dzeta_Re_рк[i] = 2100 / Re_рк[i] - 0.0021
            # Поправка на сжимаемость
            a_кр_w2[i] = sqrt(2 * k_2[i] / (k_2[i] + 1) * R_г * T_w2_torm[i])
            lambda_w2 = w_2[i] / a_кр_w2[i]
            lambda_w2_опт = 0.8
            lambda_отн_рк = lambda_w2 / lambda_w2_опт
            a1p = 0.28
            a2p = 0.035
            if lambda_отн_рк < 0.3:
                X = 0.3
            elif 0.3 <= lambda_отн_рк <= 1.35:
                X = lambda_отн_рк
            elif lambda_отн_рк > 1.35:
                X = 1.35

            delta_dzeta_lambda_рк[i] = a1p * (X - 1) ** 2 + a2p * (X - 1)
            # Профильные потери
            dzeta_профильные_рк[i] = dzeta_трения_рк[i] + dzeta_кромочные_рк[i] + delta_dzeta_Re_рк[i] + \
                                     delta_dzeta_lambda_рк[i]
            # Вторичные потери
            dzeta_концевые_рк[i] = 2 * dzeta_трения_рк[i] * t_рк[i] * sin(betta_1[i]) / l_р2[i]
            if g_охл_рк[i] > 0:
                # Термодинамические потери
                B_I = sin(betta_2[i]) * F_2a[i] / G_г2[i] * Cp_2[i] / R_г * p_2[i] - u_2[i] * cos(betta_2[i])
                w_2_реал[i] = sqrt(B_I ** 2 + 2 * Cp_2[i] * T_2см_torm[i] - u_2[i] ** 2) - B_I
                w_2_теор[i] = sqrt(B_I ** 2 + 2 * Cp_2[i] * T_2_torm[i] - u_2[i] ** 2) - B_I
                h_тд_рк[i] = (w_2_теор[i] ** 2 - w_2_реал[i] ** 2) / 2
                dzeta_тд_рк[i] = h_тд_рк[i] / H_р[i]
                # Потери смешения
                w_отн_охл = 0.45  # 0.4-0.5
                dzeta_см_рк[i] = g_охл_рк[i] / (1 + g_охл_рк[i]) * (1 - w_отн_охл) ** 2
            else:
                dzeta_тд_рк[i] = 0
                dzeta_см_рк[i] = 0
            # Коэф. скорости для СА
            psi[i] = sqrt(1 - dzeta_профильные_рк[i] - dzeta_концевые_рк[i] - dzeta_тд_рк[i] - dzeta_см_рк[i])
        del cup_psi

        # Мощность на окружности РК   #TODO Уточнить знаки, в лекции походу ошибка
        N_u[i] = G_г1[i] * c_1u[i] * u_1[i] + G_г2[i] * c_2u[i] * u_2[i]
        # Осредненная работа на окружности РК
        L_u[i] = 2 * N_u[i] / (G_г1[i] + G_г2[i])
        # КПД на окружности РК №1
        eff_u1[i] = L_u[i] / H_0[i]
        # Удельные потери в СА
        h_c[i] = 0.5 * (phi[i] ** (-2) - 1) * c_1[i] ** 2
        # Удельные потери в СА с учетом их использования в РК
        h_c_I[i] = h_c[i] * T_2ад[i] / T_1[i]
        # Относительные потери в СА
        dzeta_ca[i] = h_c[i] / H_0[i]
        # Относительные потери в СА с учетом их использования в РК
        dzeta_ca_I[i] = dzeta_ca[i] * T_2ад[i] / T_1[i]
        # Удельные потери в РК
        h_рк[i] = 0.5 * (psi[i] ** (-2) - 1) * w_2[i] ** 2
        # Относительные потери в РК
        dzeta_рк[i] = h_рк[i] / H_0[i]
        # Удельные потери с выходной скоростью
        h_вых[i] = c_2[i] ** 2 / 2
        # Относительные потери с выходной скоростью
        dzeta_вых[i] = h_вых[i] / H_0[i]
        # КПД на окружности рабочего колеса №2
        eff_u2[i] = 1 - dzeta_ca_I[i] - dzeta_рк[i] - dzeta_вых[i]
        # Удельные потери в радиальном зазоре
        h_delta[i] = 1.37 * (1 + 1.6 * ro_сред[i]) * (1 + l_р2[i] / D_т2_сред[i]) * delta_рад[i] / l_р2[i] * L_u[i]

        # Относительные потери в радиальном зазоре
        dzeta_delta[i] = h_delta[i] / H_0[i]
        # Затраты мощности на трение и вентиляцию
        density_12[i] = (v_1[i] + v_2[i]) / (2 * v_1[i] * v_2[i])
        epsilon = 1
        N_тв[i] = (1.07 * D_т2_сред[i] ** 2 + 61 * (1 - epsilon) * D_т2_сред[i] * l_р2[i]) * (
                u_2[i] / 100) ** 3 * density_12[i]
        # Удельные потери на трение ие вентиляцию
        h_тв[i] = 2 * N_тв[i] / (G_г1[i] + G_г2[i])
        # Относительные потери на трение и вентиляцию
        dzeta_тв[i] = h_тв[i] / H_0[i]
        # Мощностной КПД ступени
        eff_ст[i] = eff_u1[i] - dzeta_delta[i] - dzeta_тв[i]
        # Лопаточный КПД ступени
        eff_л[i] = eff_ст[i] + dzeta_вых[i]
        # Удельная работа ступени
        L_ст[i] = H_0[i] * eff_ст[i]
        # Мощность ступени
        N_ст[i] = L_ст[i] * (G_г1[i] + G_г2[i]) / 2

        if i == z - 1:
            if abs((N_ст[i] - cup_N_ст) / cup_N_ст) * 100 < eps:
                break
            else:
                continue
        else:
            break

    # Статическая температура за ступенью  #TODO Тут должно быть Ср? в каком сечении?
    T_ст[i] = T_2[i] + (h_delta[i] + h_тв[i]) / Cp_2[i]
    # Температура торможения за ступенью
    T_ст_torm[i] = T_ст[i] + h_вых[i] / Cp_2[i]
    # Давление торможения за ступенью
    p_ст_torm[i] = p_2[i] * (T_ст_torm[i] / T_ст[i]) ** (k_2[i] / (k_2[i] - 1))
    # Степень расширения в ступени по полному давлению
    pi_ст_torm[i] = p_0_torm[i] / p_ст_torm[i]
    # Степень расширения в ступени по статическому давлению
    pi_ст[i] = p_0_torm[i] / p_2[i]
    # Теплоперепад в ступени по параметрам торможения  #TODO проверить какое тут должно быть Cp
    H_ст_torm[i] = Cp_12[i] * T_0_torm[i] * (1 - pi_ст_torm[i] ** ((1 - k_12[i]) / k_12[i]))
    # Располагаемый теплоперепад в ступени (контрольный)
    H_ст[i] = Cp_12[i] * T_0_torm[i] * (1 - pi_ст[i] ** ((1 - k_12[i]) / k_12[i]))
    # КПД ступени по параметрам торможения
    eff_ст_torm[i] = L_ст[i] / H_ст_torm[i]

    # Отношение скоростей TODO про этот пункт ничего не понял

    # Коэф. нагрузки ступени
    L_u_наг[i] = L_u[i] / u_2[i] ** 2
    # Критические скорости в расчетных сечениях #TODO Тут должно быть k? в каком сечении?
    a_кр_0[i] = sqrt(2 * k_0[i] / (k_0[i] + 1) * R_г * T_0_torm[i])
    a_кр_1[i] = sqrt(2 * k_1[i] / (k_1[i] + 1) * R_г * T_1_torm[i])
    a_кр_2[i] = sqrt(2 * k_2[i] / (k_2[i] + 1) * R_г * T_2см_torm[i])
    # Скорости звука в расчетных сечениях
    a_0[i] = sqrt(k_0[i] * R_г * T_0[i])
    a_1[i] = sqrt(k_1[i] * R_г * T_1[i])
    a_2[i] = sqrt(k_2[i] * R_г * T_2[i])
    # Приведенные скорости в расчетных сечениях
    lambda_0[i] = c_0[i] / a_кр_0[i]
    lambda_1[i] = c_1[i] / a_кр_0[i]
    lambda_2[i] = c_2[i] / a_кр_0[i]
    # Числа Маха в расчетных сечениях
    M_0[i] = c_0[i] / a_0[i]
    M_1[i] = c_1[i] / a_1[i]
    M_2[i] = c_2[i] / a_2[i]

# Расчет параметров турбины
# Мощность турбины
N_т_I = sum(N_ст)
# Суммарный расход воздуха на охлаждение всех ступеней турбины
G_охл_I = sum(G_охл_СА) + sum(G_охл_РК)
# Расход газа на выходе из турбины TODO Как учесть утечки в поступенчатом расчете?
G_гz = G_г0[0] + G_охл_I - G_ут_т
# Удельная работа турбины
L_т_I = 2 * N_т_I / (G_г0[0] + G_гz)
# Степень расширения в турбине по статическому давлению
pi_т_I = p_0_torm[0] / p_2[z - 1]
# Степень расширения в турбине по полному давлению
pi_т_torm_I = p_0_torm[0] / p_2_torm[z - 1]
# Средняя теплоемкость процесса расширения
Cp_т_сред_I = Cp_г_сред(T_1[0], T_2[z - 1], alfa, fuel)
# Средний показатель адиабаты процесса расширения
k_т_сред_I = Cp_т_сред_I / (Cp_т_сред_I - R_г)
# Располагаемый теплоперепад в турбине
H_т_I = Cp_т_сред_I * T_0_torm[0] * (1 - pi_т_I ** ((1 - k_т_сред_I) / k_т_сред_I))
# Теплоперепад в турбине по параметрам торможения
H_т_torm_I = Cp_т_сред_I * T_0_torm[0] * (1 - pi_т_torm_I ** ((1 - k_т_сред_I) / k_т_сред_I))
# КПД турбины мощностной
eff_т_I = L_т_I / H_т_I
# КПД турбины по параметрам торможения
eff_т_torm_I = L_т_I / H_т_torm_I
# КПД турбины лопаточный
eff_л_I = (L_т_I + h_вых[
    z - 1]) / H_т_I  # TODO Нормально ли что лопаточный кпд больше кпд торможения? Проверить все значения кпд
# Полная сила, действующая на ротор в осевом направлении TODO Надо подсчитывать?
# Полный крутящий момент TODO вообще формула не понятная
# Эффективные кпд TODO Слайд 37 что такое Hв1 и Hв2?


# Вывод ошибок
for i in range(z):
    if alfa_1[i] < radians(17) or alfa_1[i] > radians(20):
        print(out_red('alfa_1 ' + str(i + 1) + ' ступени = ' + str(
            round(degrees(alfa_1[i]), 2)) + ' град. Угол alfa_1 Должен быть в диапазоне [17...20] град.'))
        print('')

    if t_b_СА[i] < 0.7 * 1.075 or t_b_СА[i] > 1 * 1.075:
        print(out_red(
            't_b_СА ' + str(i + 1) + ' ступени = ' + str(
                round(t_b_СА[i], 2)) + ' K. t_b_СА должно быть в диапазоне [0.7...1] + 5...10%'))
        print('')

    if ro_кор[i] < 0.05:
        print(out_red(
            'Степень реактивности у корня ' + str(i + 1) + ' ступени = ' + str(
                round(ro_кор[i], 2)) + '. Должна быть больше 0.05.'))
        print('')

    if abs(w_1a[i] - c_1a[i]) > 10 ** -12:
        print(out_red('Для ' + str(i + 1) + ' ступени: w_1a = ' + str(w_1a[i]) + ' ~= ' + str(c_1a[i]) + '=c_1a'))
        print('')

    if t_b_РК[i] < 0.6 * 1.075 or t_b_РК[i] > 0.8 * 1.075:
        print(out_red(
            't_b_PK ' + str(i + 1) + ' ступени = ' + str(round(
                t_b_РК[i], 2)) + '. Значение должно быть в диапазоне [0.6...0.8] + 5-10%'))
        print('')

    if abs(w_2a[i] - c_2a[i]) > 10 ** -12:
        print(out_red('Для ' + str(i + 1) + ' ступени: w_2a = ' + str(w_2a[i]) + ' ~= ' + str(c_2a[i]) + ' = c_2a'))
        print('')

    if i == z - 1:
        if degrees(alfa_2[i]) > 90 or degrees(alfa_2[i]) < 80:
            print(out_red('Угол alfa_2 ' + str(i + 1) + ' ступени = ' + str(round(
                degrees(
                    alfa_2[
                        i]), 2)) + '. Угол α2 последней ступени ∈[80...90] град.\n Угол α2 в пределах до 100° вполне '
                                   'допустим, но наличие отрицательного угла означает,\n что ступень несколько недогружена,'
                                   'что окружная скорость при полученном угле β2 великовата\n для выбранной геометрии. Об '
                                   'этом же говорит величина угла β1. При профилировании РК по\n радиусу угол β1 у '
                                   'периферии может вырасти слишком сильно.'))
            print('')
    else:
        if degrees(alfa_2[i]) > 90 or degrees(alfa_2[i]) < 70:
            print(out_red('Угол alfa_2 ' + str(i + 1) + ' ступени = ' + str(round(
                degrees(
                    alfa_2[
                        i]),
                2)) + 'град .Угол α2 всех ступеней кроме последней ∈[70...90].\n Угол α2 в пределах до 100° '
                      'вполне допустим, но наличие отрицательного угла означает,\n что ступень несколько '
                      'недогружена, что окружная скорость при полученном угле β2 великовата\n для выбранной '
                      'геометрии. Об этом же говорит величина угла β1. При профилировании РК по\n радиусу '
                      'угол β1 у периферии может вырасти слишком сильно.'))
            print('')

# Возвращаем белый цвет в Run
print(Style.RESET_ALL)
# Вывод данных
print('******************************************************')
print('Z =', z)
print('n_т (об/мин) =', round(n_т))
print('******************************************************')
print('eff_т_I (%) =', round(eff_т_I * 100, 2))
print('eff_т_torm_I (%) =', round(eff_т_torm_I * 100, 2))
print('eff_л_I (%) =', round(eff_л_I * 100, 2))
print('eff_ст (%) = ' + str(eff_ст * 100))
print('eff_л (%) = ' + str(eff_л * 100))
print('eff_u1 (%) = ' + str(eff_u1 * 100))
print('eff_u2 (%) = ' + str(eff_u2 * 100))
print('eff_ст_torm (%) = ' + str(eff_ст_torm * 100))
print('******************************************************')
print('phi = ' + str(phi))
print('psi = ' + str(psi))
print('c_2 = ' + str(c_2))
print('c_2a = ' + str(c_2a))
print('w_2 = ' + str(w_2))
print('w_2a = ' + str(w_2a))
print('w_2_реал = ' + str(w_2_реал))
print('w_2_теор = ' + str(w_2_теор))
print('w_2_ад = ' + str(w_2_ад))
print('c_1_реал = ' + str(c_1_реал))
print('c_1_теор = ' + str(c_1_теор))
print('T_2 = ' + str(T_2))
print('T_2_torm = ' + str(T_2_torm))
print('T_2см_torm = ' + str(T_2см_torm))
print('T_ст = ' + str(T_ст))
print('T_ст_torm = ' + str(T_ст_torm))
print('T_2 + 0.5 * c_2 ** 2 / Cp_12 = ' + str(T_2 + 0.5 * c_2 ** 2 / Cp_12))
print('******************************************************')
print('alfa_0 = ' + str((alfa_0 * 180 / pi)))
print('alfa_1 = ' + str((alfa_1 * 180 / pi)))
print('alfa_2 = ' + str((alfa_2 * 180 / pi)))
print('******************************************************')
print('dzeta_трения_рк = ' + str(dzeta_трения_рк))
print('dzeta_кромочные_рк = ' + str(dzeta_кромочные_рк))
print('delta_dzeta_Re_рк = ' + str(delta_dzeta_Re_рк))
print('delta_dzeta_lambda_рк = ' + str(delta_dzeta_lambda_рк))
print('dzeta_profile_рк = ' + str(dzeta_профильные_рк))
print('dzeta_вторич_рк = ' + str(dzeta_концевые_рк))
print('dzeta_тд_рк = ' + str(dzeta_тд_рк))
print('dzeta_см_рк = ' + str(dzeta_см_рк))
print('******************************************************')
print('dzeta_трения_са = ' + str(dzeta_трения_са))
print('dzeta_кромочные_са = ' + str(dzeta_кромочные_са))
print('delta_dzeta_Re_са = ' + str(delta_dzeta_Re_са))
print('delta_dzeta_lambda_са = ' + str(delta_dzeta_lambda_са))
print('dzeta_profile_са = ' + str(dzeta_профильные_са))
print('dzeta_вторич_са = ' + str(dzeta_концевые_са))
print('dzeta_тд_са = ' + str(dzeta_тд_са))
print('dzeta_см_са = ' + str(dzeta_см_са))
print('******************************************************')

print('F_1а = ' + str(F_1а))
print('F_2a = ' + str(F_2a))
print('l_с0 = ' + str(l_с0))
print('l_с1 = ' + str(l_с1))
print('l_р2 = ' + str(l_р2))

print('G_г2 = ' + str(G_г0))
print('T_0_torm = ' + str(T_0_torm))
print('dzeta_см_рк = ' + str(dzeta_см_рк))
print('dzeta_тд_рк = ' + str(dzeta_тд_рк))
print('dzeta_тд_са = ' + str(dzeta_тд_са))
print('dzeta_см_са = ' + str(dzeta_см_са))

print('ro_сред = ' + str(ro_сред))
print('H = ' + str(H))
print('H_0 = ' + str(H_0))
print('G_охл_РК = ' + str(G_охл_РК))
print('G_охл_СА = ' + str(G_охл_СА))
print('G_г0 = ' + str(G_г0))
print('G_г1 = ' + str(G_г1))
print('G_г2 = ' + str(G_г2))
print('T_0_torm = ' + str(T_0_torm))
print('T_1_torm = ' + str(T_1_torm))
print('T_2_torm = ' + str(T_2_torm))
print('teta_СА = ' + str(teta_СА))
print('g_охл_CA = ' + str(g_охл_CA))
print('N_ст = ' + str(N_ст))
print('N_ст_сум = ' + str(sum(N_ст)))
print('N_т = ' + str(N_т))

print('T_т = ' + str(T_т))
print('ro_кор = ' + str(ro_кор))
print('******************************************************')
print('N_т = ' + str(N_т))
print('N_т_I = ' + str(N_т_I))
print('G_охл = ' + str(G_охл))
print('G_охл_I = ' + str(G_охл_I))
print('G_т = ' + str(G_т))
print('G_гz = ' + str(G_гz))
print('L_т = ' + str(L_т))
print('L_т_I = ' + str(L_т_I))
print('pi_т = ' + str(pi_т))
print('pi_т_I = ' + str(pi_т_I))
print('pi_т_torm_I = ' + str(pi_т_torm_I))
print('H_т = ' + str(H_т))
print('H_т_I = ' + str(H_т_I))
print('H_т_torm_I = ' + str(H_т_torm_I))
print('******************************************************')

print(Error)
